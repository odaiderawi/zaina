<?php

namespace Mezian\Zaina\Models;

use Illuminate\Support\Facades\Auth;
use Mezian\Zaina\Traits\SluggableTrait;
use Illuminate\Database\Eloquent\Model;

class PhotoAlbum extends Model
{
  use SluggableTrait;

  protected $with = [ 'photos', 'metas' ];

  protected $fillable = [
    'highlight_title',
    'category_id',
    'news_file_id',
    'name',
    'description',
    'cover_photo',
    'is_main',
    'is_active',
    'use_watermark',
  ];

  protected $appends = [ 'url' ];

  public function getUrlAttribute()
  {
    return route( 'album.show', [ 'slug' => $this->id . '-' . $this->slug ] );
  }

  protected static function boot()
  {
    parent::boot(); // TODO: Change the autogenerated stub

    self::creating( function ( $album ) {
      $album->created_by  = Auth::user()->id;
      $album->modified_by = Auth::user()->id;
      $album->is_active   = 1;
      $album->sort        = '0';
    } );

    self::created( function ( $album ) {
      Meta::data( $album, request()->all() );

    } );

    self::updated( function ( $album ) {
      $album->modified_by = Auth::user()->id;
      Meta::data( $album, request()->all() );
    } );
  }

  /**
   * Return the sluggable configuration array for this model.
   *
   * @return array
   */
  public function sluggable()
  {
    return [
      'slug' => [
        'source' => 'name',
      ],
    ];
  }

  public function getMorphClass()
  {
    return 'PhotoAlbum';

  }

  public function metas()
  {
    return $this->morphOne( Meta::class, 'metaable' );
  }

  public function photos()
  {
    return $this->hasMany( Photo::class, 'photo_album_id' );

  }

  public function scopeLive( $query )
  {
    return $query
      ->where( 'is_active', 1 )
      ->orderBy( 'created_at', 'desc' )
      ->orderBy( 'photo_albums.id', 'desc' );
  }

  public function scopeMain( $query, $currentVideoId = null )
  {
    return $query->live()
                 ->where( 'is_main', 1 )
                 ->where( 'photo_albums.id', '!=', $currentVideoId );
  }

  public function increaseView()
  {
    $this->timestamps = false;
    get_class( $this )::where( 'id', $this->id )->update( [ 'no_of_views' => $this->no_of_views + 1 ] );
    $this->timestamps = true;

    return $this;
  }

}
