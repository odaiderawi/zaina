<?php

namespace Mezian\Zaina\Models;

use Illuminate\Support\Facades\Auth;
use Mezian\Zaina\Traits\SluggableTrait;
use Illuminate\Database\Eloquent\Model;

class Tag extends Model
{
  use SluggableTrait;

  protected $with    = [ 'metas' ];
  protected $appends = [ 'url' ];

  /**
   * Return the sluggable configuration array for this model.
   *
   * @return array
   */

  protected static function boot()
  {
    parent::boot(); // TODO: Change the autogenerated stub

    self::creating( function ( $tag ) {

      $tag->created_by  = Auth::user()->id;
      $tag->modified_by = Auth::user()->id;

    } );

    self::created( function ( $tag ) {
      Meta::data( $tag, request()->all() );
    } );

    self::updated( function ( $tag ) {
      $tag->modified_by = Auth::user()->id;
    } );
  }

  protected $fillable = [ 'name', 'description', 'is_disabled' ];

  public function sluggable()
  {
    return [
      'slug' => [
        'source' => 'name',
      ],
    ];
  }

  public function getMorphClass()
  {
    return 'Tag';
  }

  public function getUrlAttribute()
  {
    return route( 'tag.show', [ 'slug' => $this->id . '-' . $this->slug ] );
  }

  public function taggable()
  {
    return $this->morphTo();
  }

  public function news()
  {
    return $this->morphedByMany( News::class, 'taggable' );
  }

  public function metas()
  {
    return $this->morphOne( Meta::class, 'metaable' );

  }

  public static function tags( $model, $data )
  {
    $tags = [];
    foreach ( $data as $tag )
    {
      if ( isset( $tag ) )
      {
        if ( is_numeric( $tag ) )
        {
          $old_tag = Tag::findOrFail( $tag );
          $old_tag->increment( 'no_of_uses' );
          $tags[] = $old_tag;
        } else if ( ( $tagg = Tag::where( 'name', $tag )->first() ) != null )
        {
          $tagg->increment( 'no_of_uses' );
          $tags[] = $tagg;
        } else
        {
          $new_tag             = new Tag();
          $new_tag->name       = $tag;
          $new_tag->no_of_uses = 1;
          $new_tag->save();
          $new_tag->refresh();
          $tags[] = $new_tag;

        }
      }

    }
    $model->tags()->sync( collect( $tags )->pluck( 'id' ) );

  }

  public function scopeSearch( $q, $data )
  {
    if ( ! is_null( $data['name'] ) || $data['name'] != '' )
    {
      $q->where( 'name', 'LIKE', '%' . $data['name'] . '%' );
    }

    return $q;

  }

}
