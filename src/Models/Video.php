<?php

namespace Mezian\Zaina\Models;

use Mezian\Zaina\Traits\SluggableTrait;
use Mezian\Zaina\Traits\TaggableTrait;
use Mezian\Zaina\Http\Requests\TagRequest;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

use Illuminate\Support\Facades\Auth;

class Video extends Model
{
  use SluggableTrait, TaggableTrait, SoftDeletes;

  protected $dates = [ 'deleted_at' ];

  protected $with    = [ 'tags', 'publisher', 'category', 'metas' ];
  protected $appends = [ 'url' ];

  protected $fillable = [
    'highlight_title',
    'image',
    'description',
    'category_id',
    'name',
    'date_to_publish',
    'source',
    'duration',
    'is_main',
    'is_disabled',
    'is_youtube',
    'url',
  ];

  protected static function boot()
  {
    parent::boot(); // TODO: Change the autogenerated stub

    self::creating( function ( $video ) {
      $video->created_by  = Auth::user()->id;
      $video->modified_by = Auth::user()->id;
      $video->url         = 'test';

    } );

    self::created( function ( $video ) {
      if ( is_null( $video->date_to_publish ) || $video->date_to_publish === null )
      {
        $video->date_to_publish = $video->created_at;
      }
    } );

    self::created( function ( $video ) {
      Meta::data( $video, request()->all() );

    } );

    self::updated( function ( $video ) {
      $video->modified_by = Auth::user()->id;
    } );
  }

  /**
   * Return the sluggable configuration array for this model.
   *
   * @return array
   */
  public function sluggable()
  {
    return [
      'slug' => [
        'source' => 'name',
      ],
    ];
  }

  public function getUrlAttribute()
  {
    return route( 'video', [ 'slug' => $this->id . '-' . $this->slug ] );
  }

  public function getMorphClass()
  {
    return 'Video';
  }

  public function tags()
  {
    return $this->morphToMany( Tag::class, 'taggable' )
                ->where( 'is_disabled', 0 )
                ->select( [ 'id', 'name', 'slug' ] );
  }

  public function metas()
  {
    return $this->morphOne( Meta::class, 'metaable' );

  }

  public function category()
  {
    return $this->belongsTo( Category::class )
                ->select( [ 'id', 'name', 'color' ] );
  }

  public function publisher()
  {
    return $this->belongsTo( User::class, 'created_by' )
                ->select( [ 'id', 'display_name' ] );
  }

  public function setSourceAttribute( $value )
  {
    preg_match( '%(?:youtube(?:-nocookie)?\.com/(?:[^/]+/.+/|(?:v|e(?:mbed)?)/|.*[?&]v=)|youtu\.be/)([^"&?/ ]{11})%i',
                $value,
                $match );

    $this->attributes['source'] = 'https://www.youtube.com/embed/' . $match[1];
  }

  public function setDateToPublishAttribute( $value )
  {
    $date                                = $this->parseDate( $value );
    $this->attributes['date_to_publish'] = $date;

  }

  public function scopeLive( $query )
  {
    return $query
      ->where( 'is_disabled', 0 )
      ->orderBy( 'videos.id', 'desc' );
  }

  public function increaseView()
  {
    $this->timestamps = false;
    get_class( $this )::where( 'id', $this->id )->update( [ 'no_of_views' => $this->no_of_views + 1 ] );
    $this->timestamps = true;

    return $this;
  }

  public function scopeMain( $query )
  {
    return $query->live()
                 ->where( 'is_main', 1 )
                 ->orderBy( 'videos.id', 'desc' );
  }

  public function scopeSearch( $q, $data )
  {
    if ( ! is_null( $data['title'] ) || $data['title'] != '' )
    {
      $q->where( 'title', 'LIKE', '%' . $data['title'] . '%' );
    }

    if ( ! is_null( $data['category_id'] ) || $data['category_id'] != '' )
    {
      $q->where( 'category_id', $data['category_id'] );
    }

    if ( ! is_null( $data['from_date'] ) || $data['from_date'] != '' )
    {
      $q->where( 'created_at', '>=', $this->parseDate( $data['from_date'] ) );
    }

    if ( ! is_null( $data['to_date'] ) || $data['to_date'] != '' )
    {
      $q->where( 'created_at', '<=', $this->parseDate( $data['to_date'] ) );
    }

    return $q;

  }

  public function parseDate( $value )
  {
    $date = new Carbon( substr( $value, 0, 24 ) );

    return Carbon::createFromFormat( 'Y-m-d H:i:s', $date )->format( 'Y-m-d H:i:s' );
  }

  public function scopeMostRead( $query, $id )
  {
    return $query->live()
                 ->where( 'created_at', '>', today()->subWeek() )
                 ->orderBy( 'no_of_views', 'DESC' )
                 ->order();
  }

  public static function getByCategory( $category_id = null )
  {
    return Video::live()->where( 'category_id', $category_id )->order();
  }

  public static function getByCategorySlug( $slug )
  {
    $category_id = Category::where( 'slug', $slug )->select( 'id' )->pluck( 'id' );

    return Video::getByCategory( $category_id );
  }

  public function scopeOrder( $query )
  {
    return $query->orderBy( 'id', 'DESC' );
  }

}
